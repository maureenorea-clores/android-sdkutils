apply plugin: 'org.sonarqube'

def branch = System.getenv("BITRISE_GIT_BRANCH")
def pRBranch = System.getenv("BITRISE_PULL_REQUEST")
def pRTargetBranch = System.getenv("BITRISEIO_GIT_BRANCH_DEST")
def tagName = System.getenv("BITRISE_GIT_TAG")
def isRelease = tagName != null && tagName != ""

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectName', 'Android SDK Utils'
        property 'sonar.host.url', System.getenv("SONARQUBE_HOST_URL")
        property 'sonar.login', System.getenv("SONARQUBE_TOKEN")
        property 'sonar.projectKey', System.getenv("SONARQUBE_PROJ_KEY")
        property 'sonar.projectVersion', scmVersion.version
        /* Tags */
        if (isRelease) {
            // Since tags don't have an explicit branch and can point to any commit, let us use the tag name
            // as branch name property. In Sonarqube, the tag is going to appear same level as other branches
            // with its own analysis.
            property 'sonar.branch.name', tagName
        }
        /* Branch analysis */
        else if (!pRBranch) {
            property 'sonar.branch.name', branch
            /* PR analysis */
        } else {
            property 'sonar.pullrequest.key', pRBranch.findAll(/\d+/)*.toInteger().last()
            property 'sonar.pullrequest.branch', branch
            property 'sonar.pullrequest.base', pRTargetBranch
        }
        property 'sonar.qualitygate.wait', true

        /* Dependency Check */
        property 'sonar.dependencyCheck.skip', System.getenv("SONAR_DEPENDENCYCHECK_SKIP")
        property 'sonar.dependencyCheck.jsonReportPath', 'build/reports/dependency-check-report.json'
        property 'sonar.dependencyCheck.htmlReportPath', 'build/reports/dependency-check-report.html'
        /* Dependency Check severity minimum score, will have the Sonarqube default values when not set */
        property 'sonar.dependencyCheck.severity.blocker', System.getenv("SONAR_DEPENDENCYCHECK_SEVERITY_BLOCKER") ?: 8
        property 'sonar.dependencyCheck.severity.critical', System.getenv("SONAR_DEPENDENCYCHECK_SEVERITY_CRITICAL") ?: 7
        property 'sonar.dependencyCheck.severity.major', System.getenv("SONAR_DEPENDENCYCHECK_SEVERITY_MAJOR") ?: 4
        property 'sonar.dependencyCheck.severity.minor', System.getenv("SONAR_DEPENDENCYCHECK_SEVERITY_MINOR") ?: 0
    }
}

subprojects { subproject ->
    sonarqube {
        properties {
            property 'sonar.sources', 'src'
            property 'sonar.exclusions',    '**/test/**, ' +
                                            '**/*Generated.java, ' +
                                            'build/**, ' +
                                            '*.json, ' +
                                            '**/*test*/**, ' +
                                            '**/.gradle/**, ' +
                                            '**/R.class'
            property 'sonar.test.inclusions', '**/test/**'
            property 'sonar.coverage.jacoco.xmlReportPaths',
                    isRelease ? 'build/reports/jacoco/jacocoReleaseReport/jacocoReleaseReport.xml' :
                            'build/reports/jacoco/jacocoDebugReport/jacocoDebugReport.xml'
            property 'sonar.junit.reportPaths',
                    isRelease ? 'build/test-results/testReleaseUnitTest' :
                            'build/test-results/testDebugUnitTest'
        }
    }
}

// sample module is a sample app to test sdk utils functions which should be excluded from sdk-utils
project(':sample') {
    sonarqube {
        skipProject = true
    }
}

